// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// WorkspaceResumeAttachmentsAttachment - The type of attachment
type WorkspaceResumeAttachmentsAttachment string

const (
	WorkspaceResumeAttachmentsAttachmentReadwrite WorkspaceResumeAttachmentsAttachment = "READWRITE"
	WorkspaceResumeAttachmentsAttachmentReadonly  WorkspaceResumeAttachmentsAttachment = "READONLY"
)

func (e WorkspaceResumeAttachmentsAttachment) ToPointer() *WorkspaceResumeAttachmentsAttachment {
	return &e
}

func (e *WorkspaceResumeAttachmentsAttachment) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "READWRITE":
		fallthrough
	case "READONLY":
		*e = WorkspaceResumeAttachmentsAttachment(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WorkspaceResumeAttachmentsAttachment: %v", v)
	}
}

// WorkspaceResumeAttachments - Represents information related to database attachments
type WorkspaceResumeAttachments struct {
	// The type of attachment
	Attachment WorkspaceResumeAttachmentsAttachment `json:"attachment"`
	// Name of the database
	Database string `json:"database"`
	// The error if the attachment was not successful
	Error *string `json:"error,omitempty"`
	// Whether the attachment was successful or not
	Success bool `json:"success"`
}

// WorkspaceState - State of the workspace
type WorkspaceState string

const (
	WorkspaceStateActive     WorkspaceState = "ACTIVE"
	WorkspaceStatePending    WorkspaceState = "PENDING"
	WorkspaceStateSuspended  WorkspaceState = "SUSPENDED"
	WorkspaceStateFailed     WorkspaceState = "FAILED"
	WorkspaceStateTerminated WorkspaceState = "TERMINATED"
)

func (e WorkspaceState) ToPointer() *WorkspaceState {
	return &e
}

func (e *WorkspaceState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "PENDING":
		fallthrough
	case "SUSPENDED":
		fallthrough
	case "FAILED":
		fallthrough
	case "TERMINATED":
		*e = WorkspaceState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WorkspaceState: %v", v)
	}
}

// Workspace - Represents information related to a workspace
type Workspace struct {
	// The timestamp of when the workspace was created
	CreatedAt string `json:"createdAt"`
	// Endpoint to connect to the workspace
	Endpoint *string `json:"endpoint,omitempty"`
	// (If included in the output) The timestamp of when the workspace was last resumed
	LastResumedAt *string `json:"lastResumedAt,omitempty"`
	// Name of the workspace
	Name string `json:"name"`
	// (If included in the output) The result of database attachments after the workspace was resumed
	ResumeAttachments []WorkspaceResumeAttachments `json:"resumeAttachments,omitempty"`
	// (If included in the output) The current progress percentage for the scaling workspace
	ScalingProgress *float64 `json:"scalingProgress,omitempty"`
	// Size of the workspace (in workspace size notation), such as "S-00" or "S-1"
	//
	Size string `json:"size"`
	// State of the workspace
	State WorkspaceState `json:"state"`
	// (If included in the output) The timestamp of when the workspace was terminated
	TerminatedAt *string `json:"terminatedAt,omitempty"`
	// ID of the workspace group containing the workspace
	WorkspaceGroupID string `json:"workspaceGroupID"`
	// ID of the workspace
	WorkspaceID string `json:"workspaceID"`
}
