// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// StorageDRStatusComputeStorageDRState - Status of Storage DR operation
type StorageDRStatusComputeStorageDRState string

const (
	StorageDRStatusComputeStorageDRStateActive    StorageDRStatusComputeStorageDRState = "Active"
	StorageDRStatusComputeStorageDRStateCompleted StorageDRStatusComputeStorageDRState = "Completed"
	StorageDRStatusComputeStorageDRStateFailed    StorageDRStatusComputeStorageDRState = "Failed"
	StorageDRStatusComputeStorageDRStateExpired   StorageDRStatusComputeStorageDRState = "Expired"
	StorageDRStatusComputeStorageDRStateCanceled  StorageDRStatusComputeStorageDRState = "Canceled"
)

func (e StorageDRStatusComputeStorageDRState) ToPointer() *StorageDRStatusComputeStorageDRState {
	return &e
}

func (e *StorageDRStatusComputeStorageDRState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Active":
		fallthrough
	case "Completed":
		fallthrough
	case "Failed":
		fallthrough
	case "Expired":
		fallthrough
	case "Canceled":
		*e = StorageDRStatusComputeStorageDRState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StorageDRStatusComputeStorageDRState: %v", v)
	}
}

// StorageDRStatusComputeStorageDRType - Name of Storage DR operation
type StorageDRStatusComputeStorageDRType string

const (
	StorageDRStatusComputeStorageDRTypeFailover    StorageDRStatusComputeStorageDRType = "Failover"
	StorageDRStatusComputeStorageDRTypeFailback    StorageDRStatusComputeStorageDRType = "Failback"
	StorageDRStatusComputeStorageDRTypeDrTestStart StorageDRStatusComputeStorageDRType = "DRTestStart"
	StorageDRStatusComputeStorageDRTypeDrTestEnd   StorageDRStatusComputeStorageDRType = "DRTestEnd"
)

func (e StorageDRStatusComputeStorageDRType) ToPointer() *StorageDRStatusComputeStorageDRType {
	return &e
}

func (e *StorageDRStatusComputeStorageDRType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Failover":
		fallthrough
	case "Failback":
		fallthrough
	case "DRTestStart":
		fallthrough
	case "DRTestEnd":
		*e = StorageDRStatusComputeStorageDRType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StorageDRStatusComputeStorageDRType: %v", v)
	}
}

// StorageDRStatusCompute - Represents information related to a workspace group's latest storage DR operation
type StorageDRStatusCompute struct {
	// The number of database attachments that have been setup
	CompletedAttachments *int64 `json:"completedAttachments,omitempty"`
	// The number of workspaces that have been setup
	CompletedWorkspaces *int64 `json:"completedWorkspaces,omitempty"`
	// Status of Storage DR operation
	StorageDRState StorageDRStatusComputeStorageDRState `json:"storageDRState"`
	// Name of Storage DR operation
	StorageDRType StorageDRStatusComputeStorageDRType `json:"storageDRType"`
	// The total number of database attachments to setup
	TotalAttachments *int64 `json:"totalAttachments,omitempty"`
	// The total number of workspaces to setup
	TotalWorkspaces *int64 `json:"totalWorkspaces,omitempty"`
}

// StorageDRStatus - Represents Storage DR status information
type StorageDRStatus struct {
	// Represents information related to a workspace group's latest storage DR operation
	Compute StorageDRStatusCompute `json:"compute"`
	Storage []ReplicatedDatabase   `json:"storage"`
}
